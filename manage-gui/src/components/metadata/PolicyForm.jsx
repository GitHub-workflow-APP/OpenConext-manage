import React, {useEffect, useState} from "react";

import "./PolicyForm.scss";
import I18n from "i18n-js";
import ReactTooltip from "react-tooltip";
import {Select} from "../index";
import {groupBy, isEmpty, stop} from "../../utils/Utils";
import CheckBox from "../CheckBox";
import {AutoFormat} from "../../utils/AutoformatPolicy";

export default function PolicyForm({
                                       identityProviders = [],
                                       serviceProviders = [],
                                       policyAttributes = [],
                                       allowedLoas = [],
                                       data,
                                       onChange,
                                       onError,
                                       errors,
                                       isNew
                                   }) {

    const [autoGenerateDescription, setAutoGenerateDescription] = useState(true);

    useEffect(() => {
        if (isNew) {
            //Mark the required regular fields required
            onError("denyAdvice", true);
            onError("denyAdviceNl", true);
            onError("attributes", true);
            onError("description", false)
        }
    }, []);

    const policyTypeOptions = ["reg", "step"]
        .map(policyType => ({
            label: I18n.t(`policies.${policyType}`),
            value: policyType
        }));

    const providerLabel = (providers, selectedProvider) => {
        const provider = providers.find(prov => prov.data.entityid === selectedProvider.name);
        return isEmpty(provider) ? selectedProvider.name : provider.data.metaDataFields["name:en"];
    }

    const renderAutoFormatDescription = () => {
        if (autoGenerateDescription) {
            const identityProviderNames = (data.identityProviderIds || []).map(prov => providerLabel(identityProviders, prov));
            const serviceProviderNames = (data.serviceProviderIds || []).map(prov => providerLabel(serviceProviders, prov));
            const description = AutoFormat.description(
                data,
                identityProviderNames,
                serviceProviderNames);
            if (data.description !== description) {
                onChange("data.description", description);
            }
        }
        return data.description || "";
    }

    const onChangeIdentityProviders = (options) => {
        onChange("data.identityProviderIds", options.map(option => ({name: option.value})))
    }

    const onChangeServiceProviders = (options) => {
        onChange("data.serviceProviderIds", options.map(option => ({name: option.value})));
        onError("serviceProviderIds", isEmpty(options));
    }

    const providerOptions = (providers, providerKey) =>
        providers
            .filter(provider => !(data[providerKey] || []).some(prov => prov.name === provider.data.entityid))
            .map(provider => ({
                label: provider.data.metaDataFields["name:en"] || "Missing",
                value: provider.data.entityid
            }))

    const providerValues = (providers, providerKey) =>
        (data[providerKey] || [])
            .map(provider => ({
                value: provider.name,
                label: providerLabel(providers, provider)
            }))

    const hasAttributes = (propagateError = true) => {
        const attributesEmpty = isEmpty(data.attributes) || data.attributes.every(attr => isEmpty(attr.value));
        if (propagateError) {
            onError("attributes", attributesEmpty);
        }
        return !attributesEmpty;
    }

    const deleteAttribute = name => {
        const attributes = data.attributes.filter(attr => attr.name !== name);
        onChange("data.attributes", attributes, () => hasAttributes())
    }

    const deleteValue = (name, index) => {
        const attributes = data.attributes.filter(attr => attr.name === name && attr.index !== index);
        onChange("data.attributes", attributes, () => hasAttributes());
    }

    const addAttribute = option => {
        const attributes = data.attributes;
        attributes.push({name: option.value, value: "", negated: false});
        onChange("data.attributes", [...attributes]);
    }

    const changeValue = (name, index, e) => {
        const attribute = data.attributes.find(attr => attr.name === name && attr.index === index);
        attribute.value = e.target.value;
        data.attributes.splice(index, 1, attribute);
        onChange("data.attributes", [...data.attributes], () => hasAttributes());
    }

    const addValue = (e, name) => {
        stop(e);
        const attributes = data.attributes;
        attributes.push({name: name, value: "", negated: false});
        onChange("data.attributes", [...attributes])
    }

    const resolveAttributeLabel = name => {
        return policyAttributes.find(attr => attr.value === name)?.label;
    }

    const groupedAttributes = groupBy(data.attributes.map((attr, index) => {
        attr.index = index;
        return attr;
    }), "name");

    const internalOnChange = (e, attribute, required = false) => {
        const value = e.target.value;
        onChange(`data.${attribute}`, value);
        if (required) {
            onError(attribute, isEmpty(value));
        }
    }
    const addLoa = option => {
        const loas = data.loas;
        loas.push({level: option.value, allAttributesMustMatch: false, negateCidrNotation: false,
            attributes: [], cidrNotations: []});
        onChange("data.loas", [...loas]);
    }


    const toggleAutoGenerateDescription = e => {
        const checked = e.target.checked;
        setAutoGenerateDescription(checked);
        onError("description", !checked && isEmpty(data.description));
    }

    const onChangePolicyType = option => {
        onChange("data.type", option.value, () => {
            const isRegPolicy = option.value === "reg";
            ["denyAdvice", "denyAdviceNl"].forEach(attr => {
                onError(attr, isRegPolicy);
                onChange(`data.${attr}`, "");
            })
            onError("attributes", isRegPolicy);
            onChange("data.attributes", []);
            onError("loas", !isRegPolicy);
            onChange("data.loas", []);
        });
    }

    const renderError = attribute => {
        return (
            <div className="error"><span>{I18n.t("metadata.required", {name: attribute})}</span></div>
        );
    }

    const renderPolicyType = () => {
        return (
            <div className="input-field">
                <label htmlFor="policyType">
                    <span>{I18n.t("policies.policyType")}</span>
                    {!isNew && <>
                        <i className="fa fa-info-circle"
                           data-for="type-tooltip"
                           data-tip/>
                        <ReactTooltip id="type-tooltip"
                                      type="info"
                                      place="right"
                                      class="tool-tip"
                                      effect="solid">
                            <span>{I18n.t("policies.typeTooltip")}</span>
                        </ReactTooltip>
                    </>}
                </label>
                <Select
                    className="policy-select"
                    onChange={onChangePolicyType}
                    options={policyTypeOptions}
                    disabled={!isNew}
                    value={I18n.t(`policies.${data.type}`)}
                    isSearchable={false}
                />
            </div>
        );
    }

    const renderPolicyName = () => {
        return (
            <div className="input-field">
                <label htmlFor="name">
                    <span>{I18n.t("policies.name")}</span>
                    <i className="fa fa-info-circle"
                       data-for="name-tooltip"
                       data-tip/>
                    <ReactTooltip id="name-tooltip"
                                  type="info"
                                  place="right"
                                  class="tool-tip"
                                  effect="solid">
                        <span>{I18n.t("policies.nameTooltip")}</span>
                    </ReactTooltip>
                </label>
                <input id="name"
                       type="text"
                       value={data.name || ""}
                       onChange={e => internalOnChange(e, "name", true)}/>
                {isEmpty(data.name) && renderError("Name")}
            </div>
        );
    }

    const renderIdentityProviders = () => {
        return (
            <div className="input-field">
                <label htmlFor="institutionProviders">
                    <span>{I18n.t("policies.institutionProviders")}</span>
                    <i className="fa fa-info-circle"
                       data-for="institutionProviders-tooltip"
                       data-tip/>
                    <ReactTooltip id="institutionProviders-tooltip"
                                  type="info"
                                  place="right"
                                  class="tool-tip"
                                  effect="solid">
                        <span>{I18n.t("policies.institutionProvidersTooltip")}</span>
                    </ReactTooltip>
                </label>
                <Select
                    isMulti={true}
                    className="policy-select"
                    onChange={onChangeIdentityProviders}
                    placeholder={I18n.t("policies.institutionProvidersPlaceholder")}
                    options={providerOptions(identityProviders, "identityProviderIds")}
                    value={providerValues(identityProviders, "identityProviderIds")}
                />
            </div>
        );
    }

    const renderServiceProviders = () => {
        return (
            <div className="input-field">
                <label htmlFor="serviceProviders">
                    <span>{I18n.t("policies.serviceProviders")}</span>
                    <i className="fa fa-info-circle"
                       data-for="serviceProviders-tooltip"
                       data-tip/>
                    <ReactTooltip id="serviceProviders-tooltip"
                                  type="info"
                                  place="right"
                                  class="tool-tip"
                                  effect="solid">
                        <span>{I18n.t("policies.serviceProvidersTooltip")}</span>
                    </ReactTooltip>
                </label>
                <Select
                    isMulti={true}
                    className="policy-select"
                    onChange={onChangeServiceProviders}
                    placeholder={I18n.t("policies.serviceProvidersPlaceholder")}
                    options={providerOptions(serviceProviders, "serviceProviderIds")}
                    value={providerValues(serviceProviders, "serviceProviderIds")}
                />
                {isEmpty(data.serviceProviderIds) && renderError("Service provider")}
            </div>
        );
    }

    const renderAccess = () => {
        return (
            <>
                <p>{I18n.t("policies.access")}</p>
                <div className="checkbox-options">
                    <div className="checkbox-container">
                        <label htmlFor="permit">
                            <span>{I18n.t("policies.permit")}</span>
                            <i className="fa fa-info-circle"
                               data-for="permit-tooltip"
                               data-tip/>
                            <ReactTooltip id="permit-tooltip"
                                          type="info"
                                          place="right"
                                          class="tool-tip"
                                          effect="solid">
                                <span>{I18n.t("policies.permitTooltip")}</span>
                            </ReactTooltip>
                        </label>
                        <CheckBox
                            name="permit"
                            onChange={e => onChange("data.denyRule", !e.target.checked)}
                            value={!data.denyRule}
                        />
                    </div>
                    <div className="checkbox-container">
                        <label htmlFor="deny">
                            <span>{I18n.t("policies.deny")}</span>
                            <i className="fa fa-info-circle"
                               data-for="deny-tooltip"
                               data-tip/>
                            <ReactTooltip id="deny-tooltip"
                                          type="info"
                                          place="right"
                                          class="tool-tip"
                                          effect="solid">
                                <span>{I18n.t("policies.denyTooltip")}</span>
                            </ReactTooltip>
                        </label>
                        <CheckBox
                            name="deny"
                            onChange={e => onChange("data.denyRule", e.target.checked)}
                            value={data.denyRule}
                        />
                    </div>
                </div>
            </>
        );
    }

    const renderRules = () => {
        return (
            <>
                <p>{I18n.t("policies.rules")}</p>
                <div className="checkbox-options">
                    <div className="checkbox-container">
                        <label htmlFor="and">
                            <span>{I18n.t("policies.and")}</span>
                            <i className="fa fa-info-circle"
                               data-for="and-tooltip"
                               data-tip/>
                            <ReactTooltip id="and-tooltip"
                                          type="info"
                                          place="right"
                                          class="tool-tip"
                                          effect="solid">
                                <span>{I18n.t("policies.andTooltip")}</span>
                            </ReactTooltip>
                        </label>
                        <CheckBox
                            name="and"
                            onChange={e => onChange("data.allAttributesMustMatch", !e.target.checked)}
                            value={!data.allAttributesMustMatch}
                        />
                    </div>
                    <div className="checkbox-container adjustment">
                        <label htmlFor="or">
                            <span>{I18n.t("policies.or")}</span>
                            <i className="fa fa-info-circle"
                               data-for="or-tooltip"
                               data-tip/>
                            <ReactTooltip id="or-tooltip"
                                          type="info"
                                          place="right"
                                          class="tool-tip"
                                          effect="solid">
                                <span>{I18n.t("policies.orTooltip")}</span>
                            </ReactTooltip>
                        </label>
                        <CheckBox
                            name="or"
                            onChange={e => onChange("data.allAttributesMustMatch", e.target.checked)}
                            value={data.allAttributesMustMatch}
                        />
                    </div>
                </div>
            </>
        );
    }

    const renderLoas = () => {
        return (
            <div className="attributes">
                <p>{I18n.t("policies.loas")}</p>
                <Select
                    className="policy-select"
                    onChange={addLoa}
                    value={null}
                    options={allowedLoas
                        .filter(loa => !data.loas.some(dataLoa => loa.value === dataLoa.level))
                        .map(loa => ({value: loa, label: loa}))}
                    placeholder={I18n.t("policies.addLoa")}
                    isSearchable={false}
                />
                <div>{JSON.stringify(data.loas)}</div>
                {isEmpty(data.loas) && renderError("Level of assurance")}
            </div>

        );
    }

    const renderAttributes = () => {
        return (
            <div className="attributes">
                <p>{I18n.t("policies.attribute")}</p>
                {Object.keys(groupedAttributes).map((name, i) =>
                    <div key={i} className="attribute-container">
                        <div className="attribute">
                            <input className="max"
                                   type="text"
                                   disabled={true}
                                   value={`${resolveAttributeLabel(name)} - ${name}`}/>
                            <span onClick={() => deleteAttribute(name)}>
                                    <i className="fa fa-trash-o"/>
                                </span>
                        </div>
                        <p>{I18n.t("policies.values")}</p>
                        {groupedAttributes[name].map((attr, i) =>
                            <div key={i} className="value">
                                <input className="max" type="text" value={attr.value}
                                       onChange={e => changeValue(name, attr.index, e)}/>
                                <span onClick={() => deleteValue(name, attr.index)}>
                                        <i className="fa fa-trash-o"/>
                                    </span>
                            </div>)}
                        <a href="#" onClick={e => addValue(e, name)}>{I18n.t("policies.addValue")}</a>
                    </div>
                )}
                <Select
                    className="policy-select"
                    onChange={addAttribute}
                    value={null}
                    options={policyAttributes.filter(attr => !data.attributes.some(dataAttr => attr.value === dataAttr.name))}
                    placeholder={I18n.t("policies.addAttribute")}
                    isSearchable={false}
                />
                {!hasAttributes(false) && renderError("Attribute")}
            </div>
        );
    }

    const renderDescription = () => {
        return (
            <div className="input-field">
                <label htmlFor="description">
                    <span>{I18n.t("policies.description")}</span>
                    <i className="fa fa-info-circle"
                       data-for="description-tooltip"
                       data-tip/>
                    <ReactTooltip id="description-tooltip"
                                  type="info"
                                  place="right"
                                  class="tool-tip"
                                  effect="solid">
                        <span>{I18n.t("policies.descriptionTooltip")}</span>
                    </ReactTooltip>
                </label>
                <textarea id="description"
                          rows={5}
                          value={renderAutoFormatDescription()}
                          onChange={e => internalOnChange(e, "description", true)}/>
                <CheckBox name="autoGenerateDescription"
                          value={autoGenerateDescription}
                          onChange={toggleAutoGenerateDescription}
                          info={I18n.t("policies.autoGenerateDescription")}/>
                {isEmpty(data.description) && renderError("Description")}
            </div>
        );
    }

    const renderDenyAdvice = () => {
        return (
            <div className="input-field">
                <label htmlFor="denyAdvice">
                    <span>{I18n.t("policies.denyAdvice")}</span>
                    <i className="fa fa-info-circle"
                       data-for="denyAdvice-tooltip"
                       data-tip/>
                    <ReactTooltip id="denyAdvice-tooltip"
                                  type="info"
                                  place="right"
                                  class="tool-tip"
                                  effect="solid">
                        <span>{I18n.t("policies.denyAdviceTooltip")}</span>
                    </ReactTooltip>
                </label>
                <input id="denyAdvice"
                       type="text"
                       value={data.denyAdvice || ""}
                       onChange={e => internalOnChange(e, "denyAdvice", true)}/>
                {isEmpty(data.denyAdvice) && renderError("Deny advice")}
            </div>
        );
    }

    const renderDenyAdviceNl = () => {
        return (
            <div className="input-field">
                <label htmlFor="denyAdviceNl">
                    <span>{I18n.t("policies.denyAdviceNl")}</span>
                </label>
                <input id="denyAdviceNl"
                       type="text"
                       value={data.denyAdviceNl || ""}
                       onChange={e => internalOnChange(e, "denyAdviceNl", true)}/>
                {isEmpty(data.denyAdviceNl) && renderError("Deny advice NL")}
            </div>
        );
    }

    const renderActive = () => {
        return (
            <div className="input-field row">
                <CheckBox name="active"
                          value={data.active}
                          onChange={e => onChange("data.active", e.target.checked)}
                          info={I18n.t("policies.active")}/>
                <i className="fa fa-info-circle"
                   data-for="active-tooltip"
                   data-tip/>
                <ReactTooltip id="active-tooltip"
                              type="info"
                              place="right"
                              class="tool-tip"
                              effect="solid">
                    <span>{I18n.t("policies.activeTooltip")}</span>
                </ReactTooltip>
            </div>
        );
    }

    const isRegularPolicy = data.type === "reg";

    return (
        <section className="metadata-policy-form">
            <section className="policy-form">
                {renderPolicyType()}
                {renderPolicyName()}
                {renderServiceProviders()}
                {renderIdentityProviders()}
                {isRegularPolicy && renderAccess()}
                {isRegularPolicy && renderRules()}
                {isRegularPolicy && renderAttributes()}
                {!isRegularPolicy && renderLoas()}
                {renderDescription()}
                {isRegularPolicy && renderDenyAdvice()}
                {isRegularPolicy && renderDenyAdviceNl()}
                {renderActive()}
            </section>
        </section>
    )
        ;
}